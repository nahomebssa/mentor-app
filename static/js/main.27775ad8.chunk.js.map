{"version":3,"sources":["views/HomeView.js","controllers/SearchManager.js","utils.js","views/ExploreView.js","views/InboxView.js","views/ProfileView.js","controllers/FirebaseManager.js","controllers/AuthenticationManager.js","views/AuthenticationView.js","App.js","index.js"],"names":["HomeView","console","log","firebase","auth","currentUser","to","className","Card","style","width","Body","Text","Button","href","variant","Component","SearchManager","query","sortBy","callback","firestore","collection","where","get","catch","error","then","snap","name","doc","exists","data","alert","err","SearchQuery","SearchResult","fakedb","users","FIELDS","i","push","username","email","bio","areaOfExpertise","maxLen","Math","floor","random","arr","length","rating","ALERT","DBG","ERR","ENUM","obj","Object","freeze","SearchBox","onTextChange","useState","value","setValue","type","onChange","event","target","autoFocus","fontFamily","Rating","n","iconName","Array","keys","map","x","key","UserCard","user","displayName","tags","Img","src","minHeight","background","Title","t","Badge","SearchResults","results","r","result","ExploreView","searchText","setSearchText","searchResults","setSearchResults","DB","text","onClick","searchFor","InboxView","height","PageTitle","props","ProfileView","profile","state","isEmptyProfile","iName","iUsername","iBio","iEmail","saveChanges","bind","onProfileRefGet","onProfileRefGetError","getProfile","loadProfile","FNID","this","uid","updateProfile","profileRef","newProfile","set","onProfileUpdated","setState","forceUpdate","signedIn","MProfileForm","rest","MLabel","Left","children","profView","placeholder","id","FirebaseManager","AuthResult","password","res","signInWithEmailAndPassword","isAuthResult","provider","GoogleAuthProvider","signInWithPopup","onAuthStateChanged","_initialize","AuthenticationManager","includes","_authState","AuthState","SIGNEDIN","onSuccess","onFail","SIGNEDOUT","GUESTMODE","AuthProvider","EMAIL","GOOGLE","SignInFormOld","errorMessage","gotSignedIn","handleSignIn","signIn","setAuthState","REDIRECT_URL","errClassName","React","SignOutForm","SignInForm","setEmail","setPassword","setErrorMessage","setGotSignedIn","hasError","Form","Alert","Group","Control","e","SignUpForm","setUsername","AuthenticationView","authForm","signedOut","authMode","AppContext","createContext","AppProvider","providerValue","currentTab","setCurrentTab","Provider","AppTabs","tabs","Icon","icon","size","AppSwitch","path","component","successPath","AppLayout","Octicons","AppHeader","AppMain","App","basename","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","render","document","getElementById"],"mappings":"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","file":"static/js/main.27775ad8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import { AuthenticationManager } from \"../controllers/AuthenticationManager\";\r\nimport firebase from \"firebase\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { Button, Card } from \"react-bootstrap\";\r\n\r\nexport class HomeView extends Component {\r\n    render() {\r\n        console.log(firebase.auth().currentUser);\r\n        // const isSignedOut = (AuthenticationManager._authState == AuthenticationManager.AuthState.SIGNEDOUT)\r\n        const isSignedOut = firebase.auth().currentUser == null;\r\n        if (isSignedOut) return <Redirect to=\"/sign-in\" />;\r\n        return (\r\n            <div className=\"HomeView\">\r\n                {/* <h1 className=\"title\">Home</h1> */}\r\n                <Card style={{ width: \"18rem\" }}>\r\n                    {/* <Card.Img variant=\"top\" src=\"holder.js/100px180\" /> */}\r\n                    <Card.Body>\r\n                        {/* <Card.Title>Card Title</Card.Title> */}\r\n                        <Card.Text>\r\n                            Quickly share a couple of details about yourself.\r\n                            Let them know who you are!\r\n                        </Card.Text>\r\n                        <Button href=\"/profile\" variant=\"primary\">\r\n                            Edit Profile\r\n                        </Button>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card style={{ width: \"18rem\" }}>\r\n                    {/* <Card.Img variant=\"top\" src=\"holder.js/100px180\" /> */}\r\n                    <Card.Body>\r\n                        {/* <Card.Title>Card Title</Card.Title> */}\r\n                        <Card.Text>\r\n                            Your professor breezed through the lecture? You\r\n                            didn't figure out the answer to your question? Have\r\n                            a degree but don't know what to do with it? I've got\r\n                            you covered.\r\n                        </Card.Text>\r\n                        <Button href=\"/explore\" variant=\"primary\">\r\n                            Search for a mentor\r\n                        </Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import firebase from \"firebase\";\r\n// import {ERR, DBG} from '../utils'\r\n\r\n// const FSC_USERS = \"users\";\r\n\r\nexport class SearchManager {\r\n    static SearchQuery = class {};\r\n    static SearchResult = class {};\r\n\r\n    /**\r\n     *\r\n     * @param {SearchManager.Query} query\r\n     * @param {SearchManager.SortType} sortBy\r\n     * @returns {SearchManager.Result} ...\r\n     */\r\n    static searchFor({ query, sortBy, callback }) {\r\n        const collectionFilter = [\"\", \"\", \"\"];\r\n        const db = firebase.firestore();\r\n        db.collection(\"users\")\r\n            .where(...collectionFilter)\r\n            .get()\r\n            .catch(console.error)\r\n            .then((snap) => {\r\n                // snap.forEach(s => users.push(s))\r\n                // console.log('users', users)\r\n            });\r\n    }\r\n\r\n    static userExist({ name }) {\r\n        var db = firebase.firestore();\r\n        /* let update = */ db.collection(\"users\")\r\n            .doc(\"Dunton James\")\r\n            .get()\r\n            .then((doc) => {\r\n                if (!doc.exists) {\r\n                    alert(\"No such document!\");\r\n                    // response.send('No such document!');  // FIXME:\r\n                } else {\r\n                    console.log(name, \"Document data:\", doc.data());\r\n                    // response.send(doc.data());  // FIXME:\r\n                }\r\n                return;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Error getting document\", err);\r\n            });\r\n    }\r\n}\r\n","export function $(selector) {\r\n    return document.querySelector(selector);\r\n}\r\nexport function $$(selector) {\r\n    return document.querySelectorAll(selector);\r\n}\r\nexport function range(n) {\r\n    return [...Array(n).keys()];\r\n}\r\nexport function assert(expression = true, failMsg = \"\") {\r\n    const AssertionError = class extends Error {};\r\n    if (!expression) throw new AssertionError(`${failMsg}`);\r\n}\r\nexport const fakedb = {\r\n    users: [],\r\n};\r\nexport const unused = () => {};\r\n\r\nconst FIELDS = [\r\n    \"IT & Computer Science\",\r\n    \"Biology\",\r\n    \"Physics\",\r\n    \"Accounting\",\r\n    \"Health & Medicine\",\r\n    \"Educator\",\r\n];\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    fakedb.users.push({\r\n        username: `@user${i}`,\r\n        name: `User ${i}`,\r\n        email: `user${i}`,\r\n        bio:\r\n            \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi corporis quam, unde voluptate labore repellendus nisi facilis veniam. Laboriosam nulla fuga officia quidem sint qui odio amet pariatur quod corporis.\",\r\n        areaOfExpertise: (() => {\r\n            let maxLen = Math.floor(Math.random() * 3);\r\n            const index = () => Math.floor(Math.random() * FIELDS.length);\r\n            const arr = [];\r\n            while (maxLen-- > 0) {\r\n                arr.push(FIELDS[index()]);\r\n            }\r\n            return arr;\r\n        })(),\r\n        rating: Math.floor(Math.random() * 5),\r\n    });\r\n}\r\n\r\nconst ENUM = (obj) => Object.freeze(obj);\r\n\r\nconst __DEBUG__ = false;\r\nlet ALERT, DBG, ERR;\r\nif (__DEBUG__) {\r\n    ALERT = alert;\r\n    DBG = console.log;\r\n    ERR = console.error;\r\n} else {\r\n    ALERT = () => {};\r\n    DBG = () => {};\r\n    ERR = () => {};\r\n}\r\n\r\nexport { ALERT, DBG, ERR, ENUM };\r\n","import React, { useState } from \"react\";\r\nimport { SearchManager } from \"../controllers/SearchManager\";\r\nimport { Badge, Card } from \"react-bootstrap\";\r\nimport { fakedb as DB, range } from \"../utils\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction SearchBox({ onTextChange }) {\r\n    const [value, setValue] = useState(\"\");\r\n    const onChange = (event) => {\r\n        setValue(event.target.value);\r\n        onTextChange(event.target.value);\r\n    };\r\n    return (\r\n        <div className=\"SearchBox flex fww fdc\">\r\n            <input type=\"text\" value={value} onChange={onChange} autoFocus />\r\n            <span style={{ fontFamily: \"monospace\" }}>{value}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Rating = ({ value, iconName }) => {\r\n    const MAX_RATING = 5;\r\n    return (\r\n        <div className=\"Rating flex\">\r\n            {range(MAX_RATING).map((x, i) => {\r\n                return (\r\n                    <i\r\n                        key={i}\r\n                        className={`material-icons ${\r\n                            i < value ? \"--filled\" : \"--empty\"\r\n                        }`}\r\n                    >\r\n                        {iconName}\r\n                    </i>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction UserCard({ user }) {\r\n    const { name: displayName, bio, areaOfExpertise: tags, rating } = user;\r\n    return (\r\n        <Card>\r\n            <Card.Img\r\n                variant=\"top\"\r\n                src=\"#\"\r\n                style={{ minHeight: \"30vh\", background: \"slategrey\" }}\r\n            />\r\n            <Card.Body>\r\n                <Card.Title>\r\n                    <h3>{displayName}</h3>\r\n                </Card.Title>\r\n                <Card.Text>{bio}</Card.Text>\r\n                <Rating value={rating} />\r\n                {tags.map((t, i) => {\r\n                    return (\r\n                        <Badge variant=\"secondary\" className=\"p-2 mr-2\" key={i}>\r\n                            {t}\r\n                        </Badge>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction SearchResults({ results }) {\r\n    return (\r\n        <div className=\"SearchResults flex fdc\">\r\n            {results.map((r, i) => {\r\n                const result = { user: results[i] };\r\n                return <UserCard key={i} user={result.user} />;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ExploreView() {\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    setSearchResults(DB.users || []);\r\n    const handleClick = () => {\r\n        // SearchManager.userExist({ name: searchText })\r\n        SearchManager.searchFor({ query: searchText });\r\n    };\r\n    console.log(firebase.auth().currentUser);\r\n    return (\r\n        <div className=\"ExploreView flex fdc\">\r\n            <SearchBox onTextChange={(text) => setSearchText(text)} />\r\n            <button onClick={handleClick}>send data</button>\r\n            <SearchResults results={searchResults} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nexport class InboxView extends Component {\r\n    render() {\r\n        console.log(firebase.auth().currentUser);\r\n        return (\r\n            <div className=\"InboxView flex\" style={{ height: \"100%\" }}>\r\n                <div className=\"coming-soon flex-1 flex aic jcc\">\r\n                    <p>Coming soon...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport { DBG, ALERT } from \"../utils\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import { GridBox } from \"../components\";\r\n\r\nconst PageTitle = (props) => <h2 className=\"title\">Edit Profile</h2>;\r\n\r\nexport class ProfileView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const FNID = `[ProfileView#constructor]`;\r\n        DBG(FNID, `props.profile: `, this.props.profile);\r\n\r\n        // props passed in as attributes\r\n        const { profile = {} } = this.props;\r\n\r\n        // maintain the state of the profile view\r\n        this.state = {\r\n            // profile: props.profile || DEFAULT_PROFILE || { isEmptyProfile: true, }\r\n            profile: profile || { isEmptyProfile: true },\r\n\r\n            // ProfileForm\r\n            iName: profile.name || \"\",\r\n            iUsername: profile.username || \"\",\r\n            iBio: profile.bio || \"\",\r\n            iEmail: profile.email || \"\",\r\n        };\r\n\r\n        // ProfileForm\r\n        this.saveChanges = this.saveChanges.bind(this);\r\n\r\n        this.onProfileRefGet = this.onProfileRefGet.bind(this);\r\n        this.onProfileRefGetError = this.onProfileRefGetError.bind(this);\r\n        this.getProfile = this.loadProfile.bind(this);\r\n\r\n        // get profile from firebase\r\n        this.loadProfile();\r\n    }\r\n\r\n    onProfileUpdated() {\r\n        alert(\"Your changes have been saved.\");\r\n    }\r\n\r\n    // ProfileForm\r\n    saveChanges() {\r\n        const FNID = `[ProfileForm#saveChanges]`;\r\n        // ALERT(`${FNID} SUCCESS \\n${result}`)\r\n        // DBG(FNID, result)\r\n\r\n        const { name, bio } = this.state;\r\n        ALERT(`saving changes...\\nname: ${name}\\nbio: ${bio}`);\r\n\r\n        const user = firebase.auth().currentUser;\r\n        // const { displayName, email, photoURL, emailVerified, uid } = user;\r\n        const { uid } = user;\r\n        user.updateProfile({\r\n            displayName: this.state.name,\r\n            // photoURL: \"https://example.com/jane-q-user/profile.jpg\"\r\n        })\r\n            .then(function () {\r\n                // Update successful.\r\n                ALERT(`${FNID} updated profile`);\r\n            })\r\n            .catch(function (error) {\r\n                // An error happened.\r\n                ALERT(`${FNID} failed to update profile`);\r\n                DBG(FNID, error);\r\n            });\r\n\r\n        const db = firebase.firestore();\r\n        const usersRef = db.collection(\"/users\");\r\n        const profileRef = usersRef.doc(uid);\r\n        const newProfile = {\r\n            // ...this.state.profile,\r\n            name: this.state.iName,\r\n            username: this.state.iUsername,\r\n            bio: this.state.iBio,\r\n            email: this.state.iEmail,\r\n        };\r\n        DBG(newProfile);\r\n        profileRef.set(newProfile);\r\n\r\n        this.onProfileUpdated();\r\n    }\r\n    // end ProfileForm\r\n\r\n    onProfileRefGet(doc) {\r\n        const thispv = this;\r\n        const FNID = `[ProfileView#onProfileRefGet]`;\r\n        if (doc.exists) {\r\n            const profile = doc.data();\r\n            thispv.setState({\r\n                // name: firebase.auth().currentUser.displayName,\r\n                profile,\r\n                iName: profile.name,\r\n                iUsername: profile.username,\r\n                iBio: profile.bio,\r\n                iEmail: profile.email,\r\n            });\r\n            this.forceUpdate();\r\n            DBG(`${FNID} this.state.profile`, this.state.profile);\r\n            // ALERT(`${FNID} doc exists`)\r\n        } else {\r\n            console.log(\"No such document 'doc.data()' defined!\");\r\n        }\r\n    }\r\n\r\n    onProfileRefGetError(error) {\r\n        const FNID = `[ProfileView#onProfileRefGetError]`;\r\n        console.log(\"Error getting document:\", error);\r\n        ALERT(`${FNID} Error getting document: ${error}`);\r\n    }\r\n\r\n    loadProfile() {\r\n        if (!firebase.auth().currentUser) {\r\n            ALERT(\"NO CURUSER\");\r\n            this.setState({ signedIn: false });\r\n            return;\r\n        }\r\n        // const DEFAULT_PROFILE = { isDefaultProfile: true, name: \"\", bio: \"\" };\r\n        const user = firebase.auth().currentUser;\r\n        // const { displayName, email, photoURL, emailVerified, uid } = user || {};\r\n        const { uid } = user || {};\r\n\r\n        // const profileRef = firebase.firestore().collection(\"/users\").doc(firebase.auth().currentUser)\r\n        const db = firebase.firestore();\r\n        const usersRef = db.collection(\"/users\");\r\n        const profileRef = usersRef.doc(uid);\r\n        profileRef\r\n            .get()\r\n            .then(this.onProfileRefGet)\r\n            .catch(this.onProfileRefGetError);\r\n\r\n        DBG(`user: `, user);\r\n    }\r\n\r\n    render() {\r\n        const MProfileForm = ({ ...rest }) => <div {...rest} />;\r\n        const MLabel = ({ ...rest }) => (\r\n            <label className=\"flex aifs\" {...rest} />\r\n        );\r\n        MLabel.Left = ({ children }) => (\r\n            <span style={{ width: \"30%\" }}>{children}</span>\r\n        );\r\n        // const { profile, signedIn } = this.state;\r\n        const profView = (\r\n            <div className=\"ProfileView\">\r\n                <div className=\"flex fdc\">\r\n                    <PageTitle />\r\n                    {/* <ProfileForm\r\n\t\t\t\t\t\tprofile={profile} /> */}\r\n                    <MProfileForm className=\"profile-form flex fww\">\r\n                        <MLabel>\r\n                            <MLabel.Left>Name</MLabel.Left>\r\n                            <input\r\n                                style={{ width: \"70%\" }}\r\n                                type=\"text\"\r\n                                placeholder=\"Name\"\r\n                                value={this.state.iName}\r\n                                onChange={(event) =>\r\n                                    this.setState({ iName: event.target.value })\r\n                                }\r\n                            />\r\n                        </MLabel>\r\n\r\n                        <MLabel>\r\n                            <MLabel.Left>Username</MLabel.Left>\r\n                            <input\r\n                                style={{ width: \"70%\" }}\r\n                                type=\"text\"\r\n                                placeholder=\"Username\"\r\n                                value={this.state.iUsername}\r\n                                onChange={(event) =>\r\n                                    this.setState({\r\n                                        iUsername: event.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </MLabel>\r\n\r\n                        <MLabel>\r\n                            <MLabel.Left>Bio</MLabel.Left>\r\n                            <textarea\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Insert bio here...\"\r\n                                value={this.state.iBio}\r\n                                onChange={(event) =>\r\n                                    this.setState({ iBio: event.target.value })\r\n                                }\r\n                            />\r\n                        </MLabel>\r\n\r\n                        {/* <MLabel>\r\n\t\t\t\t\t\t\t\t<span style={{width: '30%'}}>Email</span>\r\n\t\t\t\t\t\t\t\t<input style={{width: '70%'}}\r\n\t\t\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Email address\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.iEmail}\r\n\t\t\t\t\t\t\t\t\tonChange={(event) => this.setState({ iEmail: event.target.value })} />\r\n\t\t\t\t\t\t\t</label> */}\r\n                        <div id=\"btns\" className=\"flex \">\r\n                            <input\r\n                                className=\"btn btn-primary flex-1\"\r\n                                type=\"button\"\r\n                                onClick={(event) => {\r\n                                    this.saveChanges();\r\n                                }}\r\n                                value=\"Save changes\"\r\n                            />\r\n                        </div>\r\n                    </MProfileForm>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        // return signedIn ? profView : <Redirect to='/sign-in' />\r\n        console.log(firebase.auth().currentUser);\r\n        return profView;\r\n    }\r\n}\r\n","import firebase from \"firebase\";\r\nimport { ALERT, ERR, DBG } from \"../utils\";\r\n\r\nexport class FirebaseManager {\r\n    static _initialize() {\r\n        FirebaseManager.AuthResult = class {\r\n            constructor({ result, error }) {\r\n                this.result = result;\r\n                this.error = error;\r\n            }\r\n        };\r\n    }\r\n    static signInWithEmailAndPassword(email, password) {\r\n        const FNID = \"[FirebaseManager#signInWithEmailAndPassword]\\n\";\r\n        const TAB = \"    \";\r\n        let res;\r\n\r\n        /* const result =  */ firebase\r\n            .auth()\r\n            .signInWithEmailAndPassword(email, password)\r\n            .then(function (result) {\r\n                DBG(\"signInWithEmailAndPassword, HERE\");\r\n                res = new FirebaseManager.AuthResult({\r\n                    result: result,\r\n                    error: null,\r\n                });\r\n                ALERT(`${FNID}Signed in user:\\n${result}`);\r\n                DBG(result);\r\n            })\r\n            .catch(function (error) {\r\n                res = new FirebaseManager.AuthResult({ result: null, error });\r\n                ALERT(\r\n                    `${FNID}Error: couldn't sign in user\\n${TAB}fberr: \"${error}\"`\r\n                );\r\n                ERR(FNID, error);\r\n                // Handle Errors here.\r\n                // var errorCode = error.code;\r\n                // var errorMessage = error.message;\r\n                // ...\r\n            });\r\n\r\n        const isAuthResult = res instanceof FirebaseManager.AuthResult;\r\n        ALERT(\r\n            `${FNID}res: ${res}\\n${\r\n                isAuthResult ? \"\" : \"not\"\r\n            } instanceof FirebaseManager.AuthResult`\r\n        );\r\n        return res;\r\n    }\r\n\r\n    // signInWithPopup(provider)\r\n    static signInWithGoogle() {\r\n        var provider = new firebase.auth.GoogleAuthProvider();\r\n        firebase\r\n            .auth()\r\n            .signInWithPopup(provider)\r\n            .then(function (result) {\r\n                // This gives you a Google Access Token. You can use it to access the Google API.\r\n                // var token = result.credential.accessToken;\r\n                // The signed-in user info.\r\n                // var user = result.user;\r\n                // ...\r\n            })\r\n            .catch(function (error) {\r\n                // Handle Errors here.\r\n                // var errorCode = error.code;\r\n                // var errorMessage = error.message;\r\n                // The email of the user's account used.\r\n                // var email = error.email;\r\n                // The firebase.auth.AuthCredential type that was used.\r\n                // var credential = error.credential;\r\n                // ...\r\n            });\r\n    }\r\n\r\n    static onAuthStateChanged() {\r\n        firebase.auth().onAuthStateChanged(function (user) {\r\n            if (user) {\r\n                // User is signed in.\r\n                // const {\r\n                //     displayName,\r\n                //     email,\r\n                //     emailVerified,\r\n                //     photoURL,\r\n                //     isAnonymous,\r\n                //     uid,\r\n                //     providerData,\r\n                // } = user;\r\n                // ...\r\n            } else {\r\n                // User is signed out.\r\n                // ...\r\n            }\r\n        });\r\n    }\r\n}\r\nFirebaseManager._initialize();\r\n","import firebase from \"firebase\";\r\nimport { FirebaseManager } from \"./FirebaseManager\";\r\nimport { ALERT, ERR, ENUM, DBG } from \"../utils\";\r\n\r\nclass AuthenticationManager {\r\n    static AuthState = ENUM({\r\n        SIGNEDIN: \"AuthState.SIGNEDIN\",\r\n        SIGNEDOUT: \"AuthState.SIGNEDOUT\",\r\n        GUESTMODE: \"AuthState.GUESTMODE\",\r\n    });\r\n    static AuthProvider = ENUM({\r\n        EMAIL: \"AuthProvider.EMAIL\",\r\n        GOOGLE: \"AuthProvider.GOOGLE\",\r\n    });\r\n    static AuthResult = class {\r\n        // constructor({ status, message }) {\r\n        constructor({ result, error }) {\r\n            this.result = result;\r\n            this.error = error;\r\n        }\r\n    };\r\n\r\n    static _authState = AuthenticationManager.AuthState.SIGNEDOUT;\r\n\r\n    static _checkEmailAndPassword(email, password) {\r\n        if (email && password) {\r\n            if (email.includes(\"@\") && email.includes(\".\")) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static setAuthState(state) {\r\n        AuthenticationManager._authState =\r\n            AuthenticationManager.AuthState.SIGNEDIN;\r\n    }\r\n\r\n    static signIn({\r\n        provider = \"\",\r\n        email = \"\",\r\n        password = \"\",\r\n        onSuccess = () => {},\r\n        onFail = () => {},\r\n    }) {\r\n        const run = true;\r\n        if (run) {\r\n            DBG(\"HERE\", onSuccess);\r\n            firebase\r\n                .auth()\r\n                .signInWithEmailAndPassword(email, password)\r\n                .then(onSuccess)\r\n                .catch(onFail);\r\n        } else {\r\n            let authRes;\r\n            switch (provider) {\r\n                case AuthenticationManager.AuthProvider.EMAIL:\r\n                    // if (!AuthenticationManager._checkEmailAndPassword(email, password))\r\n                    // {\r\n                    // \tthrow new Error(\"[AuthenticationManager#signIn] Invalid email or password, from _checkEmailAndPassword\")\r\n                    // }\r\n                    // const signInAuthResult = FirebaseManager.signInWithEmailAndPassword(email, password)\r\n                    const {\r\n                        result,\r\n                        error,\r\n                    } = FirebaseManager.signInWithEmailAndPassword(\r\n                        email,\r\n                        password\r\n                    );\r\n                    authRes = new AuthenticationManager.AuthResult({\r\n                        result,\r\n                        error,\r\n                    });\r\n                    break;\r\n                case AuthenticationManager.AuthProvider.GOOGLE:\r\n                    FirebaseManager.signInWithGoogle();\r\n                    break;\r\n                default:\r\n                    authRes = new AuthenticationManager.AuthResult({\r\n                        result: null,\r\n                        error: null,\r\n                    });\r\n                    ALERT(\r\n                        \"[AuthenticationManager#signIn] Error: No provider was specified.\"\r\n                    );\r\n                    ERR(\r\n                        \"[AuthenticationManager#signIn] Error: No provider was specified.\"\r\n                    );\r\n                    ALERT(\r\n                        `[AuthenticationManager#signIn] Provider: ${provider.constructor.name} ${provider}`\r\n                    );\r\n                    ERR(\r\n                        `[AuthenticationManager#signIn] Provider: ${provider.constructor.name} ${provider}`\r\n                    );\r\n                    break;\r\n            }\r\n            return authRes;\r\n        }\r\n    }\r\n}\r\n\r\nexport { AuthenticationManager };\r\n","import React, { useState } from \"react\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { AuthenticationManager } from \"../controllers/AuthenticationManager\";\r\nimport firebase from \"firebase\";\r\nimport { ALERT, ERR, DBG, unused } from \"../utils\";\r\nimport { Alert, Button, Form } from \"react-bootstrap\";\r\n\r\nclass SignInFormOld extends React.Component {\r\n    state = {\r\n        email: \"\", // \"user1@gmail.com\",\r\n        password: \"\", // \"user001\",\r\n        errorMessage: \"\",\r\n        gotSignedIn: false,\r\n    };\r\n    static REDIRECT_URL = \"/profile\";\r\n\r\n    handleSignIn = () => {\r\n        const { email, password } = this.state;\r\n        const onSuccess = (result) => {\r\n            AuthenticationManager.setAuthState(\r\n                AuthenticationManager.AuthState.SIGNEDIN\r\n            );\r\n            this.setState({ gotSignedIn: true });\r\n        };\r\n        const onFail = (error) => {\r\n            ALERT(`Failed to sign in :( ...`);\r\n            ERR(\"error\", error);\r\n            this.setState({ errorMessage: `${error}` });\r\n        };\r\n        ALERT(`Signing in...\\nemail: ${email}\\npassword: ${password}`);\r\n        const { EMAIL } = AuthenticationManager.AuthProvider;\r\n        AuthenticationManager.signIn({\r\n            provider: EMAIL,\r\n            email,\r\n            password,\r\n            onSuccess,\r\n            onFail,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { errorMessage, gotSignedIn } = this.state;\r\n\r\n        if (gotSignedIn === true) {\r\n            return <Redirect to={this.REDIRECT_URL} />;\r\n        }\r\n\r\n        const hasError = errorMessage !== \"\";\r\n        const errClassName = `msg-banner ${hasError ? \"--error\" : \"--hidden\"}`;\r\n        return (\r\n            <div className=\"AuthForm --sign-in\">\r\n                <div className={errClassName}>{errorMessage}</div>\r\n                <form className=\"flex fdc\">\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email address\"\r\n                        value={this.state.email}\r\n                        onChange={(event) => {\r\n                            // alert(\"AH HA!\");\r\n                            this.setState({ email: event.target.value });\r\n                        }}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={this.state.password}\r\n                        onChange={(event) => {\r\n                            // alert(\"AH HA!\");\r\n                            this.setState({ password: event.target.value });\r\n                        }}\r\n                    />\r\n                    <div className=\"flex asfe pad-10\">\r\n                        <Link to=\"/sign-up\" className=\"btn btn-link\">\r\n                            Sign up\r\n                        </Link>\r\n                        <input\r\n                            className=\"btn btn-primary\"\r\n                            type=\"button\"\r\n                            value=\"Sign In\"\r\n                            onClick={() => this.handleSignIn()}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nclass SignUpFormOld extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fullName: \"\", // \"User One\",\r\n            email: \"\", // \"user1@gmail.com\",\r\n            password: \"\", // \"user001\",\r\n            errorMessage: \"\",\r\n            gotSignedUp: false,\r\n        };\r\n        this.onSignUpSuccess = this.onSignUpSuccess.bind(this);\r\n        this.onSignUpFail = this.onSignUpFail.bind(this);\r\n    }\r\n\r\n    onSignUpSuccess(result) {\r\n        const FNID = `[SignUpForm#onSignUpSuccess]`;\r\n        ALERT(`${FNID} SUCCESS \\n${result}`);\r\n        DBG(FNID, result);\r\n\r\n        DBG(FNID, firebase.auth().currentUser);\r\n\r\n        // set user's name and other details (firebase.updateProfile)\r\n        const user = firebase.auth().currentUser;\r\n        user.updateProfile({\r\n            displayName: this.state.fullName,\r\n            //photoURL: \"https://example.com/jane-q-user/profile.jpg\"\r\n        })\r\n            .then(function () {\r\n                // Update successful.\r\n                ALERT(`${FNID} updated profile`);\r\n            })\r\n            .catch(function (error) {\r\n                // An error happened.\r\n                ALERT(`${FNID} failed to update profile`);\r\n                DBG(FNID, error);\r\n            });\r\n\r\n        // add user to db\r\n        const db = firebase.firestore();\r\n        const usersRef = db.collection(\"users\");\r\n        usersRef.doc(result.user.uid).set({\r\n            isSetup: \"no?false:true\",\r\n            name: \"<no name>\",\r\n            bio: \"<no bio>\",\r\n        });\r\n\r\n        // this needs to happen last, it will re-render, and redirect the page\r\n        this.setState({ gotSignedUp: true });\r\n    }\r\n    onSignUpFail(error) {\r\n        // {code, message} = error\r\n        const FNID = `[SignUpForm#onSignUpFail]`;\r\n        ALERT(`${FNID} FAILED \\n${error}`);\r\n        ERR(FNID, error);\r\n        this.setState({ errorMessage: `${error}` });\r\n    }\r\n\r\n    handleSignUp() {\r\n        const { email, password } = this.state;\r\n        ALERT(`Signing up...\\nemail: ${email}\\npassword: ${password}`);\r\n\r\n        firebase\r\n            .auth()\r\n            .createUserWithEmailAndPassword(email, password)\r\n            .then(this.onSignUpSuccess)\r\n            .catch(this.onSignUpFail);\r\n    }\r\n\r\n    render() {\r\n        const { errorMessage, gotSignedUp } = this.state;\r\n\r\n        if (gotSignedUp === true) {\r\n            return <Redirect to=\"/sign-in\" />;\r\n        }\r\n\r\n        const hasError = errorMessage !== \"\";\r\n        const message = errorMessage;\r\n        return (\r\n            <div className=\"auth-form --sign-up\">\r\n                <div\r\n                    className={`msg-banner ${\r\n                        hasError ? \"--error\" : \"--hidden\"\r\n                    }`}\r\n                >\r\n                    {message}\r\n                </div>\r\n                <Form>\r\n                    <Form.Group className=\"mb-0\">\r\n                        {/* <Form.Label>Full name</Form.Label> */}\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Full Name\"\r\n                            value={this.state.fullName}\r\n                            onChange={(event) =>\r\n                                this.setState({ fullName: event.target.value })\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-0\">\r\n                        {/* <Form.Label>Email address</Form.Label> */}\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Email address\"\r\n                            value={this.state.email}\r\n                            onChange={(event) =>\r\n                                this.setState({ email: event.target.value })\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-0\">\r\n                        {/* <Form.Label>Password</Form.Label> */}\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            value={this.state.password}\r\n                            onChange={(event) =>\r\n                                this.setState({ password: event.target.value })\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <Link\r\n                            to=\"/sign-in\"\r\n                            className=\"btn btn-link\"\r\n                            style={{ flex: 1 }}\r\n                        >\r\n                            Sign in\r\n                        </Link>\r\n                        <Form.Control\r\n                            className=\"btn-primary\"\r\n                            type=\"submit\"\r\n                            value=\"Sign Up\"\r\n                            onClick={() => this.handleSignUp()}\r\n                        />\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst SignOutForm = (props) => null;\r\n\r\nfunction SignInForm() {\r\n    const REDIRECT_URL = \"/profile\";\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [gotSignedIn, setGotSignedIn] = useState(\"\");\r\n    const btnSignInClickHandler = () => {\r\n        const onSuccess = (result) => {\r\n            AuthenticationManager.setAuthState(\r\n                AuthenticationManager.AuthState.SIGNEDIN\r\n            );\r\n            setGotSignedIn(true);\r\n        };\r\n        const onFail = (error) => {\r\n            ALERT(`Failed to sign in :( ...`);\r\n            ERR(\"error\", error);\r\n            setErrorMessage(`${error}`);\r\n        };\r\n        ALERT(`Signing in...\\nemail: ${email}\\npassword: ${password}`);\r\n        const { EMAIL } = AuthenticationManager.AuthProvider;\r\n        AuthenticationManager.signIn({\r\n            provider: EMAIL,\r\n            email,\r\n            password,\r\n            onSuccess,\r\n            onFail,\r\n        });\r\n    };\r\n    if (gotSignedIn === true) {\r\n        return <Redirect to={REDIRECT_URL} />;\r\n    }\r\n    const hasError = errorMessage !== \"\";\r\n    return (\r\n        <Form>\r\n            {hasError && <Alert variant=\"danger\">{errorMessage}</Alert>}\r\n            <Form.Group>\r\n                <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    autoFocus\r\n                />\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    autoFocus\r\n                />\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Button variant=\"link\" href=\"/sign-up\">\r\n                    Sign Up\r\n                </Button>\r\n                <Button onClick={btnSignInClickHandler}>Sign In</Button>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n}\r\nfunction SignUpForm() {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    return (\r\n        <Form>\r\n            <Form.Group>\r\n                <Form.Control\r\n                    placeholder=\"Username\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                    autoFocus\r\n                />\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Control\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    autoFocus\r\n                />\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Button variant=\"link\">Sign In</Button>\r\n                <Button>Sign Up</Button>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n}\r\n\r\n// TODO: use flexbox\r\nexport function AuthenticationView({ authMode }) {\r\n    const AV_CLASSNAME =\r\n        \"flex fdc aic jcc --full-screen-absolute --bg-accent --fg-white\";\r\n    const AM_SIGNIN = \"AuthMode.SIGNIN\";\r\n    const AM_SIGNUP = \"AuthMode.SIGNUP\";\r\n    const AM_SIGNOUT = \"AuthMode.SIGNOUT\";\r\n\r\n    let authForm = null;\r\n    let signedOut = false;\r\n    switch (authMode) {\r\n        case AM_SIGNIN:\r\n            authForm = <SignInForm />;\r\n            break;\r\n        case AM_SIGNUP:\r\n            authForm = <SignUpForm />;\r\n            break;\r\n        case AM_SIGNOUT:\r\n            authForm = <SignOutForm />;\r\n            signedOut = true;\r\n            break;\r\n        default:\r\n            authForm = <SignInForm />;\r\n            break;\r\n    }\r\n    console.log(firebase.auth().currentUser);\r\n    return (\r\n        <div className={AV_CLASSNAME}>\r\n            {!signedOut ? <h1 className=\"title\">Mentor Finder</h1> : null}\r\n            {authForm}\r\n        </div>\r\n    );\r\n}\r\n\r\nunused(SignInFormOld);\r\nunused(SignUpFormOld);\r\n","import React, { useState, createContext, useContext } from \"react\";\r\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\r\nimport {\r\n    HomeView,\r\n    ExploreView,\r\n    InboxView,\r\n    ProfileView,\r\n    AuthenticationView,\r\n} from \"./views\";\r\nimport * as Octicons from \"@styled-icons/octicons\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/index.css\";\r\n\r\nconst AppContext = createContext();\r\nconst AppProvider = ({ ...rest }) => {\r\n    const [currentTab, setCurrentTab] = useState(\"Profile\");\r\n    const providerValue = {\r\n        currentTab,\r\n        setCurrentTab,\r\n    };\r\n    return <AppContext.Provider {...rest} value={providerValue} />;\r\n};\r\nexport const useApp = () => useContext(AppContext);\r\n\r\nconst AppTabs = ({ tabs }) => (\r\n    <nav className=\"AppTabs\">\r\n        <ul>\r\n            {tabs.map(({ href, icon: Icon }, i) => {\r\n                return (\r\n                    <li key={i}>\r\n                        <Link to={href}>\r\n                            <Icon size={24} />\r\n                        </Link>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nconst AppSwitch = () => (\r\n    <Switch>\r\n        <Route path=\"/explore\" component={ExploreView} />\r\n        <Route path=\"/inbox\" component={InboxView} />\r\n        <Route path=\"/profile\" component={ProfileView} />\r\n        <Route path=\"/sign-in\">\r\n            <AuthenticationView\r\n                authMode=\"AuthMode.SIGNIN\"\r\n                successPath={\"/profile\"}\r\n            />\r\n        </Route>\r\n        <Route path=\"/sign-up\">\r\n            <AuthenticationView authMode=\"AuthMode.SIGNUP\" />\r\n        </Route>\r\n        <Route path=\"/sign-out\">\r\n            <AuthenticationView authMode=\"AuthMode.SIGNOUT\" />\r\n        </Route>\r\n        <Route path=\"/\" component={HomeView} />\r\n    </Switch>\r\n);\r\nconst AppLayout = ({ children, ...rest }) => {\r\n    const tabs = [\r\n        { href: \"/\", icon: Octicons.Home },\r\n        { href: \"/explore\", icon: Octicons.Flame },\r\n        { href: \"/inbox\", icon: Octicons.Inbox },\r\n        { href: \"/profile\", icon: Octicons.Person },\r\n    ];\r\n    const AppHeader = ({ children }) => (\r\n        <header className=\"AppHeader\">{children}</header>\r\n    );\r\n    const AppMain = ({ children }) => (\r\n        <main className=\"AppMain\">{children}</main>\r\n    );\r\n    return (\r\n        <div className=\"App\">\r\n            <AppHeader>\r\n                <b>Mentor Finder</b>\r\n            </AppHeader>\r\n            <AppMain>\r\n                {children}\r\n                <AppSwitch />\r\n            </AppMain>\r\n            <AppTabs tabs={tabs} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function App() {\r\n    let basename;\r\n    // basename = \"\"\r\n    // basename = \"/dist/app.html\";\r\n    // basename = \"/mentor-app/app.html\";\r\n    return (\r\n        <>\r\n            <AppProvider>\r\n                <BrowserRouter basename={basename}>\r\n                    <AppLayout />\r\n                </BrowserRouter>\r\n            </AppProvider>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { initializeApp } from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCmE6rP0Vsuherr46YH8-OQ_SoRXyp6_gg\",\r\n    authDomain: \"mentor-finder-app.firebaseapp.com\",\r\n    databaseURL: \"https://mentor-finder-app.firebaseio.com\",\r\n    projectId: \"mentor-finder-app\",\r\n    storageBucket: \"mentor-finder-app.appspot.com\",\r\n    messagingSenderId: \"223437150523\",\r\n    appId: \"1:223437150523:web:3885fb7f8739c0d1a23f1e\",\r\n    measurementId: \"G-KL1Q7SGE9T\",\r\n};\r\ninitializeApp(firebaseConfig);\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}